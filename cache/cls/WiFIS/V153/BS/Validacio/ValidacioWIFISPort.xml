<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WiFIS.V153.BS.Validacio.ValidacioWIFISPort">
<ProcedureBlock>1</ProcedureBlock>
<Super>WiFIS.V153.BS.Service</Super>
<TimeCreated>63505,35592.198383</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating)</Description>
<Default>$Id$</Default>
</Parameter>

<Parameter name="ELEMENTQUALIFIED">
<Description>
Non-default elementFormQualified for types XML namespace.</Description>
<Default>0</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Description>
This is the namespace used by the Service</Description>
<Default>http://pdm.isalut.gencat.net/sw</Default>
</Parameter>

<Parameter name="OUTPUTTYPEATTRIBUTE">
<Description>
Use xsi:type attribute for literal types.</Description>
<Default>1</Default>
</Parameter>

<Parameter name="SECURITYIN">
<Description>
Determines handling of Security header.</Description>
<Default>ALLOW</Default>
</Parameter>

<Parameter name="SERVICENAME">
<Description>
This is the name of the Service</Description>
<Default>ValidacioWIFIS</Default>
</Parameter>

<Parameter name="SOAPVERSION">
<Description>
This is the SOAP version supported by the service.</Description>
<Default>1.1</Default>
</Parameter>

<Parameter name="USECLASSNAMESPACES">
<Description>
Namespaces of referenced classes will be used in the WSDL.</Description>
<Default>1</Default>
</Parameter>

<Method name="ValidacioAccio">
<FormalSpec>MissatgeWIFIS:%String,pServiceName:%String,pMethodName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ret = ""
	#dim tRsp As WiFIS.V153.BS.s1.WSResposta =..Forward(MissatgeWIFIS,pServiceName,pMethodName)
	if $isobject(tRsp) {
		for i=1:1:tRsp.LlistaMissatges.Count() {
			#dim err As WiFIS.V153.BS.s1.WSMissatge = tRsp.LlistaMissatges.GetAt(i)
			set ret = ret_err.descripcio
		}
	}
	quit ret
]]></Implementation>
</Method>

<Method name="ConfirmarAccio">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Cites",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="DemanarCancelacio">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Derivacions",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="DemanarNova">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Derivacions",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="NotificarFinalitzacio">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Derivacions",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="NotificarProgramacio">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Cites",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="NotificarRealitzacio">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Cites",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="NotificarResultats">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Derivacions",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="RespondreNova">
<Final>1</Final>
<FormalSpec>MissatgeWIFIS:%String</FormalSpec>
<ProcedureBlock>1</ProcedureBlock>
<ReturnType>%String</ReturnType>
<WebMethod>1</WebMethod>
<SoapBindingStyle>document</SoapBindingStyle>
<SoapBodyUse>literal</SoapBodyUse>
<ReturnTypeParams>XMLNAME="return"</ReturnTypeParams>
<SoapAction/>
<Implementation><![CDATA[ 	quit ..ValidacioAccio(MissatgeWIFIS,"Derivacions",$$$CurrentMethod)
]]></Implementation>
</Method>

<Method name="Forward">
<Description>
Implementa el mismo codigo para todos los WebMethods y todos los WebServices</Description>
<FormalSpec>pAny:%XML.String,pServiceName:%String,pMethodName:%String</FormalSpec>
<ReturnType>WiFIS.V153.BS.s1.WSResposta</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status=$$$OK	
 	#dim errObj as %Exception.StatusException
 	#dim tRspMsg as WiFIS.V153.BS.s1.WSResposta
 	#dim tMsg as WiFIS.V153.Msg.GenericReq
 	#dim tCodi
 	#dim tFechaHoraIn=""
 	try {
	 	// fecha hora de entrada del mensaje
	 	set tFechaHoraIn=$zdt($h,3)  
	 	
		$$$TRACE("Service="_pServiceName_"; Method="_pMethodName)
	 	$$$TRACE("Content="_$get(pAny))
	 	
	 	// crear mensaje WiFIS Ensemble
 		set tMsg=##class(WiFIS.V153.Msg.GenericReq).%New()
 		do tMsg.DatosXML.Write(pAny)
 		set tMsg.Tipo=pMethodName
 		set tMsg.Servicio=pServiceName 
 		
 		// recuperar origen y destino directamente desde XML
 		do tMsg.DatosXML.Rewind()
 		$$$THROWONERROR(tSC,##class(%XML.XPATH.Document).CreateFromStream(tMsg.DatosXML,.tDoc))
 		set tDoc.PrefixMappings="hl7 urn:hl7-org:v2xml"
 		
 		// MSH.4 origen
 		$$$THROWONERROR(tSC,tDoc.EvaluateExpression("/hl7:*/hl7:MSH/hl7:MSH.4","hl7:HD.2/text()",.tResults))
 		if tResults.Count()>0 {
			set:tResults.GetAt(1).Type=$$$XPATHVALUE tMsg.Origen=tResults.GetAt(1).Value
		}
		
		// MSH.6 destino
		$$$THROWONERROR(tSC,tDoc.EvaluateExpression("/hl7:*/hl7:MSH/hl7:MSH.6","hl7:HD.2/text()",.tResults))
		if tResults.Count()>0 {
			set:tResults.GetAt(1).Type=$$$XPATHVALUE tMsg.Destino=tResults.GetAt(1).Value
		}
 		
 		// validar esquema si es necesario
 		if (..ValidateSchema) {
			#dim tFlags
			#dim tSchemaSpec
			set tFlags=$$$SAXVALIDATION + $$$SAXNAMESPACES + $$$SAXNAMESPACEPREFIXES + $$$SAXVALIDATIONSCHEMA //+ $$$SAXVALIDATIONSCHEMAFULLCHECKING
			
			set tSchemaSpec="urn:hl7-org:v2xml file:///"_..XMLSchemaFile		 
			$$$TRACE("Schema Validation tFlags="_tFlags_" tSchemaSpec="_tSchemaSpec)
			
		 	set tReader=##class(%XML.Reader).%New()
		 	set tReader.SAXFlags=tFlags
         	set tReader.SAXSchemaSpec=tSchemaSpec
 		
        	$$$THROWONERROR(tSC,tReader.OpenString(pAny)) 		
 		}
 		$$$THROWONERROR(tSC,..ProcessInput(tMsg,.tRspMsg))
 		
 	} catch (errObj) {
		$$$TRACE("Error Forward")
	 	set tSC=errObj.AsStatus() 
 	}
 	
 	if '$isobject(tRspMsg) {
		$$$TRACE("no mensaje respuesta")
 	}
 	
	quit tRspMsg
]]></Implementation>
</Method>
</Class>
</Export>
