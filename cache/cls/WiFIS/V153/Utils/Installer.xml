<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="WiFIS.V153.Utils.Installer">
<Description>
Instalador WiFIS Easy Connect</Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63481,41148.501632</TimeCreated>

<Parameter name="SrcVer">
<Description>
Location and Revision of this file in Perforce (Auto-updating) </Description>
<Default>$Id$</Default>
</Parameter>

<Property name="Report">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Method name="Run">
<Description>
Instalación de WiFIS Easy Connect + ITB.
pPath - Path a ficheros instalación WiFISEasyConnect.
pITB - Path a ficheros instalación ITB.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pWiFIS:%String="",pITB:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	set obj = ..%New()
	try {
		do obj.Log("Installer started")
		if pITB'="" {
			$$$THROWONERROR(tSC, obj.InstallITB(pITB))
			$$$THROWONERROR(tSC, obj.CheckITB())
		}
		
		$$$THROWONERROR(tSC, obj.InstallWiFIS(pWiFIS))
		$$$THROWONERROR(tSC, obj.CheckWiFIS())
	} catch ex {
		set ret = ex.AsStatus()
	}
	do obj.Log("Installer ended:"_$select($$$ISERR(ret):$piece($system.Status.GetErrorText(ret),":",2),1:" OK"))
	do obj.ShowReport()
	quit ret
]]></Implementation>
</Method>

<Method name="Log">
<FormalSpec>pText:%String</FormalSpec>
<Implementation><![CDATA[	set ..Report=..Report_$zdt($h,3)_": "_pText_$$$NL
]]></Implementation>
</Method>

<Method name="ShowReport">
<FormalSpec>pText:%String</FormalSpec>
<Implementation><![CDATA[
	write !,"###############################################################"
	write !,"Installer report:",!
	write ..Report
]]></Implementation>
</Method>

<Method name="InstallITB">
<Description>
Instalación de paquete ITB</Description>
<FormalSpec>pITB:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		// normalize path
		if pITB="" $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB path cannot be empty"))
		set itb = ##class(%File).NormalizeDirectory("", pITB)
		if itb="" $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB path incorrect"))
		
		do ..Log("ITB installation started")
		
		// cls
		set path = ##class(%File).SubDirectoryName(itb,"cls",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB cls path incorrect"))
		do $system.OBJ.ImportDir(path, "*.xml", "c", .errorlog, 1, .imported, 0, .selectedlist)
		
		do ..Log("Imported classes")
		
		// lookup
		set path = ##class(%File).SubDirectoryName(itb,"backup",1)_"hl7_2_5.Lookup.xml"
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB hl7_2_5.Lookup.xml path incorrect"))
		$$$THROWONERROR(tSC, ##class(Ens.Util.LookupTable).%Import(path))
		
		do ..Log("Imported LookUp tables")
		
		do ..Log("ITB installation ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="CheckITB">
<Description>
Comprobación ITB</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		do ..Log("ITB Checking started")
		
		set info = "ITB.Info"
		set exist = ##class(%Dictionary.ClassDefinition).%ExistsId("ITB.Info")
		if 'exist $$$ThrowStatus($$$ERROR($$$GeneralError,"ITB.Info does not exist!"))
		do ..Log(info_".VERSION="_$parameter(info,"VERSION"))
		
		do ..Log("ITB Checking ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="InstallWiFIS">
<Description>
Instalación de paquete WiFIS Easy Connect</Description>
<FormalSpec>pWiFIS:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		// normalize path
		if pWiFIS="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS path cannot be empty"))
		set wifis = ##class(%File).NormalizeDirectory("", pWiFIS)
		if wifis="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS path incorrect"))
		
		do ..Log("WiFIS installation started")
		
		// inc
		set path = ##class(%File).SubDirectoryName(wifis,"inc",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS inc path incorrect"))
		do $system.OBJ.ImportDir(path, "*.inc", "c", .errorlog, 1, .imported, 0, .selectedlist)
		
		do ..Log("Imported inc")
		
		// cls
		set path = ##class(%File).SubDirectoryName(wifis,"cls",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS cls path incorrect"))
		do $system.OBJ.ImportDir(path, "*.xml", "c", .errorlog, 1, .imported, 0, .selectedlist)
		
		do ..Log("Imported classes")
		
		// schema
		set path = ##class(%File).SubDirectoryName(wifis,"schema",1)
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS schema path incorrect"))
		do $system.OBJ.ImportDir(path, "*.xml", "c", .errorlog, 1, .imported, 0, .selectedlist)
		
		do ..Log("Imported HL7 Schema")
		
		// lookup
		set path = ##class(%File).SubDirectoryName(wifis,"backup",1)_"hl7_WIFIS.Lookup.xml"
		if path="" $$$ThrowStatus($$$ERROR($$$GeneralError,"WiFIS hl7_WIFIS.Lookup.xml path incorrect"))
		$$$THROWONERROR(tSC, ##class(Ens.Util.LookupTable).%Import(path))
		
		do ..Log("Imported LookUp tables")
		
		do ..Log("WiFIS installation ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>

<Method name="CheckWiFIS">
<Description>
Comprobación WiFIS</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ret = $$$OK
	try {
		do ..Log("WiFIS Checking started")
		
		set info = "WiFIS.Info"
		set exist = ##class(%Dictionary.ClassDefinition).%ExistsId(info)
		if 'exist $$$ThrowStatus($$$ERROR($$$GeneralError,info_" does not exist!"))
		
		do ..Log(info_".VERSION="_$parameter(info,"VERSION"))
		
		set itb = "ITB.Info"
		set itbversion = $parameter(itb,"VERSION")
		set itbmin=$parameter(info,"ITBMINVERSION")
		set ok = (itbversion >= itbmin)
		
		do ..Log(info_".ITBMINVERSION="_itbmin)
		
		if 'ok $$$ThrowStatus($$$ERROR($$$GeneralError,"ITBMINVERSION="_itbmin_" and ITBVERSION="_itbversion))
		
		do ..Log("WiFIS Checking ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
]]></Implementation>
</Method>
</Class>
</Export>
