/// WiFIS Connect Installer
Class WiFIS.V202.Utils.Installer Extends %RegisteredObject
{

Parameter BasePath = "/opt/wifisconnect/app";

Parameter Namespace = "WIFISCONNECT";

Parameter CreateNamespace = "no";

Parameter DataDBPath = "/opt/wifisconnect/db/data";

Parameter CodeDBPath = "/opt/wifisconnect/db/code";

Parameter CreateTestWebApp = "no";

Parameter CheckSamlCos = "yes";

XData Install
{
<Manifest>
	<Var Name="SourcePath" Value="${BasePath}/src/"/> 
    <Var Name="ConfigPath" Value="${BasePath}/config/"/>
    <If Condition='"${CreateNamespace}"="yes"'>
        <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="yes" Ensemble="1"> 
            <Configuration> 
                <Database Name="${Namespace}-DATA" Dir="${DataDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
                <Database Name="${Namespace}-APP" Dir="${CodeDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
            </Configuration>
            <Import File="${SourcePath}WiFIS.inc" Recurse="0" Flags="cuk" />
            <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        	<Import File="${ConfigPath}" Recurse="1" Flags="cuk" />
        </Namespace>
    </If>
    <If Condition='"${CreateNamespace}"="no"'>
        <Log Text="Using namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="no" Ensemble=""> 
            <Import File="${SourcePath}WiFIS.inc" Recurse="0" Flags="cuk" />
            <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        	<Import File="${ConfigPath}" Recurse="1" Flags="cuk" />
        </Namespace>
	</If>
</Manifest>
}

/// This is a method generator whose code is generated by XGL
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
   Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Installer entry point
/// Use this in case you want to automate container installations
ClassMethod RunWithParams(ByRef vars) As %Status
{
	set ret = $$$OK
	set previousNamespace = $namespace

    try { 
        write "START INSTALLER",! 

		// set default values for installer variables
        for ivar="BasePath","Namespace","CreateNamespace","CreateDB","DataDBPath","CodeDBPath","CreateTestWebApp","ClassPath","ImportJavaHC3SA","StartTestProduction","CheckSamlCos" {
            if '$data(vars(ivar)) set vars(ivar)=$parameter($classname(), ivar)
        }

		// check interoperability enabled on namespace
		if ((vars("CreateNamespace") '= "yes")&&('##class(%EnsembleMgr).IsEnsembleNamespace(vars("Namespace")))) {
			$$$ThrowStatus($$$ERROR($$$GeneralError, "Namespace "_vars("Namespace")_" has no Interoperability enabled"))
		}

		// downgrade configuration files (/config) for backwards compatibility with Ensemble 
		if ($p($system.Version.GetProduct()," ") = "Cache") {
			do ..Log("Update config files for compatibility with Ensemble")
			$$$ThrowOnError(..DownGradeConfigFiles(vars("BasePath")_"config"))
		}

		$$$ThrowOnError(..RunManifest(.vars))

		// create web application
		if vars("CreateTestWebApp")="yes" { 
			$$$ThrowOnError(..CreateWebApp(vars("Namespace"), "/wifisconnect/ws", ""))
		}

		// check installation: version, unitests
		set $namespace = vars("Namespace")
		$$$ThrowOnError(..Check(vars("BasePath"), vars("CheckSamlCos")))

        write !,"INSTALLER SUCCESS",!

    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    }

	set $namespace = previousNamespace
    quit ret
}

/// Backwards compatible installer entry point
ClassMethod Run(RunDir As %String, CheckSamlCos As %String = "yes") As %Status
{
	set ret = $$$OK
	try {
		set vars("BasePath") = ##class(%File).NormalizeDirectory(RunDir)
		set vars("Namespace") = $namespace
  		set vars("CreateNamespace") = "no"
		set vars("CheckSamlCos") = CheckSamlCos
  		$$$ThrowOnError(..RunWithParams(.vars))
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
}

/// Check installation
ClassMethod Check(pBasePath As %String, CheckSamlCos As %String) As %Status
{
	set ret = $$$OK
	try {
		do ..Log("WiFISEasyConnect Checking started")
		
		set info = "WiFIS.Info"
		set exist = ##class(%Dictionary.ClassDefinition).%ExistsId(info)
		if 'exist $$$ThrowStatus($$$ERROR($$$GeneralError,info_" does not exist!"))
		do ..Log("__"_info_".VERSION="_$parameter(info,"VERSION"))
		
		set itb = "ITB.Info"
		set itbversion = $parameter(itb,"VERSION")
		set itbmin=$parameter(info,"ITBMINVERSION")
		set ok = (itbversion >= itbmin)
		do ..Log("__"_info_".ITBMINVERSION="_itbmin)
		
		if 'ok $$$ThrowStatus($$$ERROR($$$GeneralError,"ITBMINVERSION="_itbmin_" and ITBVERSION="_itbversion))

		if CheckSamlCos = "yes" {

			set samlcos = "IBSP.CONN.SAML.Info"
			set exist = ##class(%Dictionary.ClassDefinition).%ExistsId(samlcos)
			if 'exist $$$ThrowStatus($$$ERROR($$$GeneralError,samlcos_" does not exist!"))
			set samlcosversion = $parameter(samlcos,"VERSION")
			set samlcosmin=$parameter(info,"SAMLCOSMINVERSION")
			set ok = (samlcosversion >= samlcosmin)
			do ..Log("__"_info_".SAMLCOSMINVERSION="_samlcosmin)
			
			if 'ok $$$ThrowStatus($$$ERROR($$$GeneralError,"SAMLCOSMINVERSION="_samlcosmin_" and SAMLVERSION="_samlcosversion))
		}
		
		do ..Log("WiFISEasyConnect Checking ended")
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
}

/// Log a message
/// pText - Text message
/// pTimeStamp - Add a timestamp
/// pNewLine - Add a new line
ClassMethod Log(pText As %String, pTimeStamp As %Boolean = 1, pNewLine As %Boolean = 1)
{
	write $case(pTimeStamp,1:"["_$zdt($h,3)_"] ",:"")_pText_$case(pNewLine,1:$$$NL,:"")
}

/// Create web application
ClassMethod CreateWebApp(pNamespace As %String, pWebApp As %String, pDispatch As %String) As %Status
{
  set ret = $$$OK
  try {
    zn "%SYS" 
    set webName = pWebApp 
    set webProperties("DispatchClass") = pDispatch 
    set webProperties("NameSpace") = pNamespace 
    set webProperties("Enabled") = 1 
    set webProperties("AutheEnabled") = 64
	set webProperties("MatchRoles")=":%All"
    $$$ThrowOnError(##class(Security.Applications).Create(webName, .webProperties))

  } catch ex {
    set ret = ex.AsStatus()
  } 
  quit ret
}

/// Change generator attribute in Export config items for Ensemble compatibility
ClassMethod DownGradeConfigFiles(pDir As %String) As %Status
{
	set ret = $$$OK
	try {
		set firstLine = "<?xml version=""1.0"" encoding=""UTF-8""?>"
		set secondLine = "<Export generator=""Cache"">"
		set rs = ##class(%ResultSet).%New("%File:FileSet")
		set sc = rs.Execute(pDir,"*")
		while (rs.Next()) {
			set file = ##class(%Stream.FileCharacter).%New()
			set file.Filename = rs.Data("Name")
			do file.ReadLine(), file.ReadLine()
			set tmpstream = ##class(%Stream.GlobalCharacter).%New()
			do tmpstream.WriteLine(firstLine), tmpstream.WriteLine(secondLine)
			while 'file.AtEnd {
				do tmpstream.Write(file.Read())
			}
			do file.Clear()
			do file.Rewind()
			do file.CopyFrom(tmpstream)
			do file.%Save()
		}
	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
}

/// Import java HC3SA classes to generate SAML ticket
ClassMethod ImportJavaHC3SA(baseDir As %String = "/app", gatewayHost As %String = "127.0.0.1", gatewayPort As %String = "55555") As %Status
{
	set ret = $$$OK
	try {
		set baseDir = ##class(%File).NormalizeDirectory(baseDir)

		// default path values from basedir
		set jarFile = baseDir_"hc3sa/hc3saSamlProxy.jar"
		set classPath="hc3sa/lib/Utils.jar;hc3sa/lib/jdk1.5/bcprov-jdk15-134.jar;hc3sa/lib/jdk1.5/xmlsec-1.3.0.jar;hc3sa/lib/jdk1.5/xmlsec-1.3.0-commons-logging.jar;hc3sa/lib/jdk1.5/jargs-1.0.jar;hc3sa/lib/jdk1.5/log4j-1.2.13.jar;hc3sa/lib/jdk1.5/xmltooling-1.0-TP2-jdk-1.5.jar;hc3sa/lib/jdk1.5/retroweaver-rt-1.2.4.jar;hc3sa/lib/jdk1.5/httpclient-3.0.1.jar;hc3sa/lib/jdk1.5/joda-time-1.3.jar;hc3sa/lib/jdk1.5/httpclient-3.0.1-commons-codec-1.3.jar;hc3sa/lib/jdk1.5/opensaml-2.0-TP2-jdk-1.5.jar;hc3sa/lib/jdk1.5/javolution.jar;hc3sa/lib/HCCsa.jar;hc3sa/hc3saSamlProxy.jar;hc3sa/lib/xml/resolver-2.9.1.jar;hc3sa/lib/xml/serializer-2.9.1.jar;hc3sa/lib/xml/xalan-2.7.1.jar;hc3sa/lib/xml/xercesImpl-2.9.1.jar;hc3sa/lib/xml/xml-apis-2.9.1.jar;"
		
		// build classpath list
		set classPathList=##class(%ListOfDataTypes).%New()
		for i=1:1:$length(classPath,";") {
			set cp = $piece(classPath, ";", i)
			if cp'="" do classPathList.Insert(baseDir_cp)
		}
		
		// import jar
		do ##class(EnsLib.JavaGateway.JavaGateway).%ExpressImport(jarFile,gatewayPort,gatewayHost,0,classPathList,)

	} catch ex {
		set ret = ex.AsStatus()
	}
	quit ret
}

}
